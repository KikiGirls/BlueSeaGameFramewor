<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Examples/TimeLoopExample.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Examples/TimeLoopExample.cs" />
              <option name="updatedContent" value="using BlueSeaGameFramework.server.GameLoop;&#10;&#10;namespace BlueSeaGameFramework.server.Examples;&#10;&#10;/// &lt;summary&gt;&#10;/// 服务器时钟使用示例&#10;/// &lt;/summary&gt;&#10;public class TimeLoopExample&#10;{&#10;    private GameServerTimeLoop? _timeLoop;&#10;    private int _updateCount = 0;&#10;    &#10;    public void StartExample()&#10;    {&#10;        Console.WriteLine(&quot;启动服务器时钟示例...&quot;);&#10;        &#10;        // 创建时钟实例，设置目标帧率为30FPS&#10;        _timeLoop = new GameServerTimeLoop(30);&#10;        &#10;        // 订阅更新事件&#10;        _timeLoop.OnUpdate += OnGameUpdate;&#10;        &#10;        // 订阅FPS变化事件&#10;        _timeLoop.OnFpsChanged += OnFpsChanged;&#10;        &#10;        // 启动时钟&#10;        _timeLoop.Start();&#10;        &#10;        Console.WriteLine($&quot;时钟已启动，目标帧率: {_timeLoop.TargetFrameRate} FPS&quot;);&#10;        Console.WriteLine(&quot;按任意键停止时钟...&quot;);&#10;        &#10;        // 等待用户输入&#10;        Console.ReadKey();&#10;        &#10;        // 停止时钟&#10;        StopExample();&#10;    }&#10;    &#10;    private void OnGameUpdate(double deltaTime)&#10;    {&#10;        _updateCount++;&#10;        &#10;        // 每秒输出一次状态信息&#10;        if (_updateCount % 30 == 0)&#10;        {&#10;            Console.WriteLine($&quot;运行时间: {_timeLoop?.CurrentTimeSeconds:F2}s, &quot; +&#10;                            $&quot;帧数: {_timeLoop?.FrameCount}, &quot; +&#10;                            $&quot;当前FPS: {_timeLoop?.CurrentFps}, &quot; +&#10;                            $&quot;DeltaTime: {deltaTime:F4}s&quot;);&#10;        }&#10;        &#10;        // 在这里添加游戏逻辑更新&#10;        UpdateGameLogic(deltaTime);&#10;    }&#10;    &#10;    private void OnFpsChanged(int newFps)&#10;    {&#10;        Console.WriteLine($&quot;FPS变化: {newFps}&quot;);&#10;    }&#10;    &#10;    private void UpdateGameLogic(double deltaTime)&#10;    {&#10;        // 模拟游戏逻辑处理&#10;        // 例如：更新玩家位置、处理AI、网络消息等&#10;        &#10;        // 模拟一些计算负载&#10;        if (_updateCount % 100 == 0)&#10;        {&#10;            Thread.Sleep(1); // 模拟偶尔的延迟&#10;        }&#10;    }&#10;    &#10;    private void StopExample()&#10;    {&#10;        Console.WriteLine(&quot;正在停止时钟...&quot;);&#10;        &#10;        if (_timeLoop != null)&#10;        {&#10;            _timeLoop.OnUpdate -= OnGameUpdate;&#10;            _timeLoop.OnFpsChanged -= OnFpsChanged;&#10;            _timeLoop.Stop();&#10;            _timeLoop.Dispose();&#10;            _timeLoop = null;&#10;        }&#10;        &#10;        Console.WriteLine(&quot;时钟已停止&quot;);&#10;    }&#10;    &#10;    /// &lt;summary&gt;&#10;    /// 动态调整帧率示例&#10;    /// &lt;/summary&gt;&#10;    public void DynamicFrameRateExample()&#10;    {&#10;        _timeLoop = new GameServerTimeLoop(60);&#10;        _timeLoop.OnUpdate += (deltaTime) =&gt;&#10;        {&#10;            // 根据服务器负载动态调整帧率&#10;            var currentFps = _timeLoop.CurrentFps;&#10;            &#10;            if (currentFps &lt; _timeLoop.TargetFrameRate * 0.8) // 如果实际FPS低于目标的80%&#10;            {&#10;                // 降低目标帧率以减少负载&#10;                _timeLoop.TargetFrameRate = Math.Max(10, _timeLoop.TargetFrameRate - 5);&#10;                Console.WriteLine($&quot;检测到性能问题，降低目标帧率至: {_timeLoop.TargetFrameRate}&quot;);&#10;            }&#10;            else if (currentFps &gt;= _timeLoop.TargetFrameRate &amp;&amp; _timeLoop.TargetFrameRate &lt; 60)&#10;            {&#10;                // 如果性能良好，可以尝试提高帧率&#10;                _timeLoop.TargetFrameRate = Math.Min(60, _timeLoop.TargetFrameRate + 1);&#10;                Console.WriteLine($&quot;性能良好，提升目标帧率至: {_timeLoop.TargetFrameRate}&quot;);&#10;            }&#10;        };&#10;        &#10;        _timeLoop.Start();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/GameLoop/GameModel.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/GameLoop/GameModel.cs" />
              <option name="originalContent" value="using System.Collections.Generic;&#10;using QFramework;&#10;&#10;namespace projectName.GameSystem&#10;{&#10;    /// &lt;summary&gt;&#10;    /// 游戏计时暂停接口&#10;    /// 提供暂停和恢复游戏计时的功能&#10;    /// &lt;/summary&gt;&#10;    public interface IGameTimePause&#10;    {&#10;        /// &lt;summary&gt;&#10;        /// 游戏计时是否暂停&#10;        /// &lt;/summary&gt;&#10;        bool IsGameTimePaused { get; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 暂停游戏计时&#10;        /// &lt;/summary&gt;&#10;        void PauseGameTime();&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 恢复游戏计时&#10;        /// &lt;/summary&gt;&#10;        void ResumeGameTime();&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 切换游戏计时暂停状态&#10;        /// &lt;/summary&gt;&#10;        void ToggleGameTimePause();&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 回合制游戏模型类&#10;    /// 管理游戏的核心状态，包括当前回合、玩家顺序、游戏状态等&#10;    /// &lt;/summary&gt;&#10;    public class GameModel : IGameTimePause&#10;    {&#10;        PlayerTurnState currentPlayerTurnState = PlayerTurnState.None;&#10;        &#10;        bool isGameTimePaused;&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 游戏计时是否暂停&#10;        /// &lt;/summary&gt;&#10;        public bool IsGameTimePaused =&gt; isGameTimePaused;&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 当前游戏状态&#10;        /// &lt;/summary&gt;&#10;        public GameState GameState { get; set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 当前回合数&#10;        /// &lt;/summary&gt;&#10;        public int CurrentTurn { get; set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 最大回合数&#10;        /// &lt;/summary&gt;&#10;        public int MaxTurns { get; set; }&#10;        &#10;        public PlayerTurnState CurrentPlayerTurnState { get; set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 每回合时间限制（秒）&#10;        /// &lt;/summary&gt;&#10;        public double TurnTimeLimit { get; set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 当前回合剩余时间&#10;        /// &lt;/summary&gt;&#10;        public double CurrentTurnTime { get; set; }&#10;        &#10;&#10;        /// &lt;summary&gt;&#10;        /// 游戏是否暂停&#10;        /// &lt;/summary&gt;&#10;        public bool IsPaused { get; private set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 获得当前行动的玩家&#10;        /// &lt;/summary&gt;&#10;        public PlayerName CurrentPlayer;&#10;        &#10;        /// &lt;summary&#10;        /// 构造函数，初始化所有属性&#10;        /// &lt;/summary&gt;&#10;        public GameModel()&#10;        {&#10;            GameState = GameState.WaitingForStart;&#10;            CurrentPlayerTurnState = PlayerTurnState.None;&#10;            CurrentTurn = 1;&#10;            MaxTurns = 100;&#10;            TurnTimeLimit = 30f;&#10;            CurrentTurnTime = 0f;&#10;            IsPaused = false;&#10;            CurrentPlayer = PlayerName.None; // 初始时没有玩家&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 开始游戏&#10;        /// &lt;/summary&gt;&#10;        public void StartGame()&#10;        {&#10;            GameState = GameState.GameStarted;&#10;            CurrentTurnTime = TurnTimeLimit;&#10;            IsPaused = false;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 暂停游戏计时&#10;        /// &lt;/summary&gt;&#10;        public void PauseGameTime()&#10;        {&#10;            isGameTimePaused = true;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 恢复游戏计时&#10;        /// &lt;/summary&gt;&#10;        public void ResumeGameTime()&#10;        {&#10;            isGameTimePaused = false;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 切换游戏计时暂停状态&#10;        /// &lt;/summary&gt;&#10;        public void ToggleGameTimePause()&#10;        {&#10;            isGameTimePaused = !isGameTimePaused;&#10;        }&#10;&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 结束当前玩家回合，进入下一个玩家回合&#10;        /// &lt;/summary&gt;&#10;        public void NextTurn()&#10;        {&#10;            if (GameState != GameState.PlayerTurn || IsPaused)&#10;                return;&#10;&#10;            // 重置回合时间&#10;            CurrentTurnTime = TurnTimeLimit;&#10;&#10;            // 检查是否达到最大回合数&#10;            if (CurrentTurn &gt; MaxTurns)&#10;            {&#10;                GameState = GameState.GameEnded;&#10;            }&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 更新当前回合时间&#10;        /// &lt;/summary&gt;&#10;        /// &lt;param name=&quot;deltaTime&quot;&gt;时间增量&lt;/param&gt;&#10;        public void UpdateGameModelTurnTime(float deltaTime)&#10;        {&#10;            if (GameState != GameState.PlayerTurn|| IsPaused)&#10;                return;&#10;            CurrentTurnTime -= deltaTime;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 结束游戏&#10;        /// &lt;/summary&gt;&#10;        public void EndGame()&#10;        {&#10;            GameState = GameState.GameEnded;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using QFramework;&#10;&#10;namespace projectName.GameSystem&#10;{&#10;    /// &lt;summary&gt;&#10;    /// 游戏计时暂停接口&#10;    /// 提供暂停和恢复游戏计时的功能&#10;    /// &lt;/summary&gt;&#10;    public interface IGameTimePause&#10;    {&#10;        /// &lt;summary&gt;&#10;        /// 游戏计时是否暂停&#10;        /// &lt;/summary&gt;&#10;        bool IsGameTimePaused { get; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 暂停游戏计时&#10;        /// &lt;/summary&gt;&#10;        void PauseGameTime();&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 恢复游戏计时&#10;        /// &lt;/summary&gt;&#10;        void ResumeGameTime();&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 切换游戏计时暂停状态&#10;        /// &lt;/summary&gt;&#10;        void ToggleGameTimePause();&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// 回合制游戏模型类&#10;    /// 管理游戏的核心状态，包括当前回合、玩家顺序、游戏状态等&#10;    /// &lt;/summary&gt;&#10;    public class GameModel : IGameTimePause&#10;    {&#10;        private const int DefaultMaxTurns = 100;&#10;        private const double DefaultTurnTimeLimit = 30.0;&#10;        &#10;        private PlayerTurnState currentPlayerTurnState = PlayerTurnState.None;&#10;        private bool isGameTimePaused;&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 游戏计时是否暂停&#10;        /// &lt;/summary&gt;&#10;        public bool IsGameTimePaused =&gt; isGameTimePaused;&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 当前游戏状态&#10;        /// &lt;/summary&gt;&#10;        public GameState GameState { get; private set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 当前回合数&#10;        /// &lt;/summary&gt;&#10;        public int CurrentTurn { get; private set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 最大回合数&#10;        /// &lt;/summary&gt;&#10;        public int MaxTurns { get; private set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 当前玩家回合状态&#10;        /// &lt;/summary&gt;&#10;        public PlayerTurnState CurrentPlayerTurnState &#10;        { &#10;            get =&gt; currentPlayerTurnState;&#10;            private set =&gt; currentPlayerTurnState = value;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 每回合时间限制（秒）&#10;        /// &lt;/summary&gt;&#10;        public double TurnTimeLimit { get; private set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 当前回合剩余时间&#10;        /// &lt;/summary&gt;&#10;        public double CurrentTurnTime { get; private set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 游戏是否暂停&#10;        /// &lt;/summary&gt;&#10;        public bool IsPaused { get; private set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 获得当前行动的玩家&#10;        /// &lt;/summary&gt;&#10;        public PlayerName CurrentPlayer { get; private set; }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 游戏是否已结束&#10;        /// &lt;/summary&gt;&#10;        public bool IsGameEnded =&gt; GameState == GameState.GameEnded;&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 游戏是否正在进行中&#10;        /// &lt;/summary&gt;&#10;        public bool IsGameActive =&gt; GameState == GameState.PlayerTurn &amp;&amp; !IsPaused;&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 构造函数，初始化所有属性&#10;        /// &lt;/summary&gt;&#10;        /// &lt;param name=&quot;maxTurns&quot;&gt;最大回合数&lt;/param&gt;&#10;        /// &lt;param name=&quot;turnTimeLimit&quot;&gt;回合时间限制&lt;/param&gt;&#10;        public GameModel(int maxTurns = DefaultMaxTurns, double turnTimeLimit = DefaultTurnTimeLimit)&#10;        {&#10;            GameState = GameState.WaitingForStart;&#10;            CurrentPlayerTurnState = PlayerTurnState.None;&#10;            CurrentTurn = 1;&#10;            MaxTurns = maxTurns &gt; 0 ? maxTurns : DefaultMaxTurns;&#10;            TurnTimeLimit = turnTimeLimit &gt; 0 ? turnTimeLimit : DefaultTurnTimeLimit;&#10;            CurrentTurnTime = 0.0;&#10;            IsPaused = false;&#10;            CurrentPlayer = PlayerName.None;&#10;            isGameTimePaused = false;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 开始游戏&#10;        /// &lt;/summary&gt;&#10;        /// &lt;param name=&quot;firstPlayer&quot;&gt;第一个玩家&lt;/param&gt;&#10;        public void StartGame(PlayerName firstPlayer = PlayerName.None)&#10;        {&#10;            if (GameState != GameState.WaitingForStart)&#10;                return;&#10;                &#10;            GameState = GameState.GameStarted;&#10;            CurrentPlayer = firstPlayer;&#10;            CurrentTurnTime = TurnTimeLimit;&#10;            CurrentTurn = 1;&#10;            IsPaused = false;&#10;            isGameTimePaused = false;&#10;            CurrentPlayerTurnState = PlayerTurnState.FirstPhaseAction;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 开始玩家回合&#10;        /// &lt;/summary&gt;&#10;        /// &lt;param name=&quot;player&quot;&gt;��前玩家&lt;/param&gt;&#10;        public void StartPlayerTurn(PlayerName player)&#10;        {&#10;            if (GameState != GameState.GameStarted &amp;&amp; GameState != GameState.PlayerTurn)&#10;                return;&#10;                &#10;            GameState = GameState.PlayerTurn;&#10;            CurrentPlayer = player;&#10;            CurrentTurnTime = TurnTimeLimit;&#10;            CurrentPlayerTurnState = PlayerTurnState.FirstPhaseAction;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 暂停游戏计时&#10;        /// &lt;/summary&gt;&#10;        public void PauseGameTime()&#10;        {&#10;            isGameTimePaused = true;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 恢复游戏计时&#10;        /// &lt;/summary&gt;&#10;        public void ResumeGameTime()&#10;        {&#10;            isGameTimePaused = false;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 切换游戏计时暂停状态&#10;        /// &lt;/summary&gt;&#10;        public void ToggleGameTimePause()&#10;        {&#10;            isGameTimePaused = !isGameTimePaused;&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// 暂停游戏&#10;        /// &lt;/summary&gt;&#10;        public void PauseGame()&#10;        {&#10;            IsPaused = true;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 恢复游戏&#10;        /// &lt;/summary&gt;&#10;        public void ResumeGame()&#10;        {&#10;            IsPaused = false;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 结束当前玩家回合，进入下一个玩家回合&#10;        /// &lt;/summary&gt;&#10;        /// &lt;returns&gt;是否成功进行到下一回合&lt;/returns&gt;&#10;        public bool NextTurn()&#10;        {&#10;            if (!IsGameActive)&#10;                return false;&#10;&#10;            // 递增回合数&#10;            CurrentTurn++;&#10;            &#10;            // 重置回合时间&#10;            CurrentTurnTime = TurnTimeLimit;&#10;            &#10;            // 重置玩家回合状态&#10;            CurrentPlayerTurnState = PlayerTurnState.FirstPhaseAction;&#10;&#10;            // 检查是否达到最大回合数&#10;            if (CurrentTurn &gt; MaxTurns)&#10;            {&#10;                EndGame();&#10;                return false;&#10;            }&#10;            &#10;            return true;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 切换到下一个玩家回合阶段&#10;        /// &lt;/summary&gt;&#10;        /// &lt;returns&gt;是否成功切换到下一阶段&lt;/returns&gt;&#10;        public bool NextPhase()&#10;        {&#10;            if (!IsGameActive)&#10;                return false;&#10;                &#10;            switch (CurrentPlayerTurnState)&#10;            {&#10;                case PlayerTurnState.FirstPhaseAction:&#10;                    CurrentPlayerTurnState = PlayerTurnState.SecondPhaseBattle;&#10;                    return true;&#10;                case PlayerTurnState.SecondPhaseBattle:&#10;                    CurrentPlayerTurnState = PlayerTurnState.SecondPhaseAction;&#10;                    return true;&#10;                case PlayerTurnState.SecondPhaseAction:&#10;                    // 阶段结束，准备下一回合&#10;                    return NextTurn();&#10;                default:&#10;                    return false;&#10;            }&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 更新当前回合时间&#10;        /// &lt;/summary&gt;&#10;        /// &lt;param name=&quot;deltaTime&quot;&gt;时间增量&lt;/param&gt;&#10;        /// &lt;returns&gt;回合时间是否已耗尽&lt;/returns&gt;&#10;        public bool UpdateGameModelTurnTime(float deltaTime)&#10;        {&#10;            if (!IsGameActive || IsGameTimePaused)&#10;                return false;&#10;                &#10;            CurrentTurnTime -= deltaTime;&#10;            &#10;            // 检查时间是否耗尽&#10;            if (CurrentTurnTime &lt;= 0)&#10;            {&#10;                CurrentTurnTime = 0;&#10;                return true; // 时间耗尽&#10;            }&#10;            &#10;            return false;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 强制结束当前回合（时间耗尽时调用）&#10;        /// &lt;/summary&gt;&#10;        public void ForceEndTurn()&#10;        {&#10;            if (IsGameActive)&#10;            {&#10;                NextTurn();&#10;            }&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 结束游戏&#10;        /// &lt;/summary&gt;&#10;        public void EndGame()&#10;        {&#10;            GameState = GameState.GameEnded;&#10;            CurrentPlayerTurnState = PlayerTurnState.None;&#10;            CurrentPlayer = PlayerName.None;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 重置游戏到初始状态&#10;        /// &lt;/summary&gt;&#10;        public void ResetGame()&#10;        {&#10;            GameState = GameState.WaitingForStart;&#10;            CurrentPlayerTurnState = PlayerTurnState.None;&#10;            CurrentTurn = 1;&#10;            CurrentTurnTime = 0.0;&#10;            IsPaused = false;&#10;            CurrentPlayer = PlayerName.None;&#10;            isGameTimePaused = false;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 设置最大回合数&#10;        /// &lt;/summary&gt;&#10;        /// &lt;param name=&quot;maxTurns&quot;&gt;最大回合数&lt;/param&gt;&#10;        public void SetMaxTurns(int maxTurns)&#10;        {&#10;            if (maxTurns &gt; 0)&#10;                MaxTurns = maxTurns;&#10;        }&#10;        &#10;        /// &lt;summary&gt;&#10;        /// 设置回合时间限制&#10;        /// &lt;/summary&gt;&#10;        /// &lt;param name=&quot;timeLimit&quot;&gt;时间限制（秒）&lt;/param&gt;&#10;        public void SetTurnTimeLimit(double timeLimit)&#10;        {&#10;            if (timeLimit &gt; 0)&#10;                TurnTimeLimit = timeLimit;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Message/GameEventMessage.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Message/GameEventMessage.cs" />
              <option name="originalContent" value="using ProtoBuf;&#10;&#10;#region Imessage&#10;[ProtoContract]&#10;[ProtoInclude(100, typeof(QText))]&#10;[ProtoInclude(101, typeof(PlayerMOve))]&#10;[ProtoInclude(102, typeof(GameInitEventMsg))]&#10;[ProtoInclude(103, typeof(GameStartEventMsg))]&#10;[ProtoInclude(104, typeof(PlayerTurnChangeEventMsg))]&#10;public class IMessage&#10;{ // 可以放一些通用字段，比如协议版本等&#10;}&#10;&#10;&#10;#endregion&#10;&#10;&#10;&#10;&#10;&#10;#region 客户端发送给服务器的消息&#10;&#10;[ProtoContract]&#10;public class QText : IMessage&#10;{&#10;    [ProtoMember(1)]&#10;    public int id;&#10;}&#10;&#10;&#10;[ProtoContract]&#10;public class PlayerMOve : IMessage&#10;{&#10;    [ProtoMember(1)]&#10;    public int Playerid;&#10;&#10;    [ProtoMember(2)] public float x;&#10;    &#10;    [ProtoMember(3)] public float y;&#10;    &#10;    [ProtoMember(4)] public float z;&#10;}&#10;&#10;tag1001&#10;[ProtoContract]&#10;public class GameInitEventMsg : IMessage&#10;{&#10;    [ProtoMember(1)]&#10;    public PlayerName PlayerName;//需要发送给服务器的本地玩家名称&#10;}&#10;&#10;&#10;#endregion&#10;&#10;&#10;#region 服务端发送给客户端的消息&#10;&#10;tag1002&#10;[ProtoContract]&#10;public class GameStartEventMsg : IMessage&#10;{&#10;}&#10;&#10;//tag1003&#10;[ProtoContract]&#10;public class PlayerTurnChangeEventMsg : IMessage&#10;{&#10;    [ProtoMember(1)]&#10;    public PlayerName NewPlayerName; // 当前玩家名称&#10;    [ProtoMember(2)]&#10;    public int TurnNumber; // 当前回合数&#10;}&#10;&#10;#endregion&#10;" />
              <option name="updatedContent" value="using ProtoBuf;&#10;&#10;#region Imessage&#10;[ProtoContract]&#10;[ProtoInclude(100, typeof(QText))]&#10;[ProtoInclude(101, typeof(PlayerMOve))]&#10;[ProtoInclude(102, typeof(GameInitEventMsg))]&#10;[ProtoInclude(103, typeof(GameStartEventMsg))]&#10;[ProtoInclude(104, typeof(PlayerTurnChangeEventMsg))]&#10;public class IMessage&#10;{ // 可以放一些通用字段，比如协议版本等&#10;}&#10;&#10;&#10;#endregion&#10;&#10;&#10;&#10;&#10;&#10;#region 客户端发送给服务器的消息&#10;&#10;[ProtoContract]&#10;public class QText : IMessage&#10;{&#10;    [ProtoMember(1)]&#10;    public int id;&#10;}&#10;&#10;&#10;[ProtoContract]&#10;public class PlayerMOve : IMessage&#10;{&#10;    [ProtoMember(1)]&#10;    public int Playerid;&#10;&#10;    [ProtoMember(2)] public float x;&#10;    &#10;    [ProtoMember(3)] public float y;&#10;    &#10;    [ProtoMember(4)] public float z;&#10;}&#10;&#10;//tag1001&#10;[ProtoContract]&#10;public class GameInitEventMsg : IMessage&#10;{&#10;    [ProtoMember(1)]&#10;    public PlayerName PlayerName;//需要发送给服务器的本地玩家名称&#10;}&#10;&#10;&#10;#endregion&#10;&#10;&#10;#region 服务端发送给客户端的消息&#10;&#10;//tag1002&#10;[ProtoContract]&#10;public class GameStartEventMsg : IMessage&#10;{&#10;}&#10;&#10;//tag1003&#10;[ProtoContract]&#10;public class PlayerTurnChangeEventMsg : IMessage&#10;{&#10;    [ProtoMember(1)]&#10;    public PlayerName NewPlayerName; // 当前玩家名称&#10;    [ProtoMember(2)]&#10;    public int TurnNumber; // 当前回合数&#10;}&#10;&#10;#endregion" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Message/IMessageId.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Message/IMessageId.cs" />
              <option name="originalContent" value="namespace BlueSeaGameFramework.server;&#10;&#10;&#10;public enum MessageId : int&#10;{&#10;    None = 0,&#10;    LoginRequest = 1001,&#10;    LogoutRequest = 1002,&#10;    ChatMessage = 1003,&#10;    GameInitEventMsg = 1004,&#10;    GameStartEventMsg = 1005&#10;}" />
              <option name="updatedContent" value="namespace BlueSeaGameFramework.server;&#10;&#10;&#10;public enum MessageId : int&#10;{&#10;    None = 0,&#10;    LoginRequest = 1001,&#10;    LogoutRequest = 1002,&#10;    ChatMessage = 1003,&#10;    GameInitEventMsg = 1004,&#10;    GameStartEventMsg = 1005&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>